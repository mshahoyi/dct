"""Fill in a module description here"""

# AUTOGENERATED! DO NOT EDIT! File to edit: ../nbs/00_core.ipynb.

# %% auto 0
__all__ = ['get_prompt', 'get_prompt_suffix', 'save_vector']

# %% ../nbs/00_core.ipynb 4
def get_prompt(type: str, verbose=False):
    import datasets

    summeval = datasets.load_dataset("mteb/summeval", split="test")
    if verbose:
        print("Raw features: ", summeval.features)

    geval_coh = open(f"../prompts/{type}_detailed.txt").read()
    if verbose:
        print("Geval prompt: ", geval_coh)

    document = summeval[0]['text']
    summary = summeval[0]['machine_summaries'][0]
    if verbose:
        print("Document: ", document)
        print("Summary: ", summary)

    cur_prompt = geval_coh.replace('{{Document}}', document).replace('{{Summary}}', summary)
    if verbose:
        print("Cur prompt: ", cur_prompt)

    return cur_prompt

# %% ../nbs/00_core.ipynb 5
def get_prompt_suffix(original_prompt: str, type: str):
    if type == "flu":
        return original_prompt + "Evaluation Form:\n- Fluency:"
    elif type == "coh":
        return original_prompt + "Evaluation Form:\n- Coherence (1-5):"
    elif type == "con":
        return original_prompt + "Evaluation Form:\n- Consistency (1-5):"
    elif type == "ref":
        return original_prompt + "Evaluation Form:\n- Reference (1-5):"
    else:
        raise ValueError(f"Invalid type: {type}")

# %% ../nbs/00_core.ipynb 7
def save_vector(vector, model_name, source_layer_idx, target_layer_idx, scale, concept):
    import pandas as pd

    try:
        df = pd.read_csv(f"vectors.csv")
    except:
        df = pd.DataFrame(columns=["model_name", "source_layer_idx", "target_layer_idx", "scale", "concept", "vector"])
        df.to_csv(f"vectors.csv", index=False)
    
    if concept not in df['concept'].values:
        df = pd.concat([df, 
                   pd.DataFrame({"model_name": [model_name], 
                                 "source_layer_idx": [source_layer_idx], 
                                 "target_layer_idx": [target_layer_idx], 
                                 "scale": [scale], 
                                 "concept": [concept], 
                                 "vector": [vector.detach().cpu().numpy().tolist()]})], ignore_index=True)
        df.to_csv("vectors.csv", index=False)

